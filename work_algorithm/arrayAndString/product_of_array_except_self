# Product of Array Except Self

 Given an integer array nums, return an array answer such that answer[i] is equal to the `product of all the elements` of nums `except` nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.



insights:
> Input: nums = [1,2,3,4]

> Output: [24,12,8,6]

> 24 = 2*3*4
  [1,2,3,4]

L= 2,6,9,16


> 12 = 1*3*4

###  LR
        [1,2,3,4]
num[0]= [x,2*3*4] //Same as above [L*R], but when i=0, it's equivalent to [*R]
num[1]= [1,x,3,4] // same as above [L*R],lt's equivalent to  1*3*4
        [24,12,8,6]


#### LArray 
???
[1,1,2,6]
```
    L[0] = 1
      for i := 1; i < length; i++ {
        L[i] = nums[i-1] * L[i-1]
    }
```
#### RArray
   [ 4,9,16,4]
```
   R[length-1] = 1
    for i := length - 2; i >= 0; i-- {
        R[i] = nums[i+1] * R[i+1]
    } 
```


normal

```go
    func productExceptSelf(nums []int) []int {
    L := make([]int,len(nums))
    R := make([]int,len(nums))
    As :=make([]int,len(nums))
    
    //L[0]=nil but mode is multiply,lt's 0
    L[0]=1
    for i:=1;i<len(nums);i++{
      L[i]=L[i-1]*nums[i-1]
    }
    R[len(nums)-1]=1
    for i:=len(nums)-2;i>=0;i--{
        R[i]=R[i+1]*nums[i+1]   
    }
     for i := 0; i < len(nums); i++ {
        As[i] = L[i] * R[i]
    }
    return As

}

```